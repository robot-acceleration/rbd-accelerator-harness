# tb_dIDdq
#
# Testbench for dIDdq.jl

#-------------------------------------------------------------------------------
# Import Libraries
#-------------------------------------------------------------------------------
using LinearAlgebra
using FixedPointNumbers
using Test
include("../../../type_generic/dynamics/helpers_iiwa.jl")
include("../../../type_generic/dynamics/id_iiwa.jl") # RNEA
include("dIDdq.jl") # dID/dq

#-------------------------------------------------------------------------------
# Data Type
#-------------------------------------------------------------------------------
CUSTOM_TYPE = Float64 ###Fixed{Int32,24} # data type

#-------------------------------------------------------------------------------
# Set Constants
#-------------------------------------------------------------------------------
X,Y,Z,AX,AY,AZ,LX,LY,LZ,g = initConstants(CUSTOM_TYPE)
l1_v,l2_v,l3_v,l4_v,l5_v,l6_v,l7_v,
l1_a,l2_a,l3_a,l4_a,l5_a,l6_a,l7_a,
l1_f,l2_f,l3_f,l4_f,l5_f,l6_f,l7_f,
fext_l1,fext_l2,fext_l3,fext_l4,fext_l5,fext_l6,fext_l7,
tau = initPlaceholdersRNEA(CUSTOM_TYPE)

# Transformation Matrices, 7x[6x6]
t1X0,t2X1,t3X2,t4X3,t5X4,t6X5,t7X6 = initMotionTransforms(CUSTOM_TYPE)

# Inertia Tensors, 7x[6x6]
l1_I,l2_I,l3_I,l4_I,l5_I,l6_I,l7_I = initInertiaTensors(CUSTOM_TYPE,X,Y,Z,AX,AY,AZ,LX,LY,LZ)

# Joint Motion Subspace Matrix for Revolute Joint (= [0 0 1 0 0 0]T), 1x[6x1]
S_rev = zeros(CUSTOM_TYPE,6,1)
S_rev[AZ] = 1.0

#-------------------------------------------------------------------------------
# Get Inputs
#-------------------------------------------------------------------------------
q1   = CUSTOM_TYPE(0.297287985)
q2   = CUSTOM_TYPE(0.382395968)
q3   = CUSTOM_TYPE(-0.597634477)
q4   = CUSTOM_TYPE(-0.010445245)
q5   = CUSTOM_TYPE(-0.839026854)
q6   = CUSTOM_TYPE(0.311111338)
q7   = CUSTOM_TYPE(2.295087824)
q    = [q1, q2, q3, q4, q5, q6, q7]
qd1  = CUSTOM_TYPE(0.999904659)
qd2  = CUSTOM_TYPE(0.251662183)
qd3  = CUSTOM_TYPE(0.986666367)
qd4  = CUSTOM_TYPE(0.555751087)
qd5  = CUSTOM_TYPE(0.437107975)
qd6  = CUSTOM_TYPE(0.42471785)
qd7  = CUSTOM_TYPE(0.773223048)
qd   = [qd1, qd2, qd3, qd4, qd5, qd6, qd7]
qdd1 = CUSTOM_TYPE(0.671362351)
qdd2 = CUSTOM_TYPE(2.085405497)
qdd3 = CUSTOM_TYPE(-0.920425575)
qdd4 = CUSTOM_TYPE(5.464981623)
qdd5 = CUSTOM_TYPE(25.85650645)
qdd6 = CUSTOM_TYPE(105.449175)
qdd7 = CUSTOM_TYPE(52.12766742)
qdd  = [qdd1, qdd2, qdd3, qdd4, qdd5, qdd6, qdd7]

#-------------------------------------------------------------------------------
# Update Transforms from Inputs
#-------------------------------------------------------------------------------
t1X0,t2X1,t3X2,t4X3,t5X4,t6X5,t7X6 = updateTransforms(CUSTOM_TYPE,q,t1X0,t2X1,t3X2,t4X3,t5X4,t6X5,t7X6)

#-------------------------------------------------------------------------------
# Solve for Intermediate Variables with RNEA
#-------------------------------------------------------------------------------
tau,
l1_v,l2_v,l3_v,l4_v,l5_v,l6_v,l7_v,
l1_a,l2_a,l3_a,l4_a,l5_a,l6_a,l7_a,
l1_f,l2_f,l3_f,l4_f,l5_f,l6_f,l7_f = rnea(CUSTOM_TYPE,q,qd,qdd,1)

#-------------------------------------------------------------------------------
# Run dID/dq
#-------------------------------------------------------------------------------
dIDdq_out = dIDdq(CUSTOM_TYPE,
                  qd,
                  l1_v,l2_v,l3_v,l4_v,l5_v,l6_v,l7_v,
                  l1_a,l2_a,l3_a,l4_a,l5_a,l6_a,l7_a,
                  l1_f,l2_f,l3_f,l4_f,l5_f,l6_f,l7_f,
                  t1X0,t2X1,t3X2,t4X3,t5X4,t6X5,t7X6,
                  l1_I,l2_I,l3_I,l4_I,l5_I,l6_I,l7_I)

#-------------------------------------------------------------------------------
# Expected Outputs
#-------------------------------------------------------------------------------
# dID/dq
dIDdq_expected =
[-1.38778e-16 0.650739 -2.09667 0.000556753 0.378066 0.415192 0.0;
-1.58762e-14 -2.19113 2.32283 3.92415 3.98288 0.554302 0.0;
-2.25899e-16 -0.042951 0.0589455 0.994759 0.0238366 0.0298527 0.0;
1.31606e-14 0.964714 -1.83998 -1.7027 -1.65174 0.0336682 0.0;
-8.79796e-16 -0.0207372 0.0461716 0.0420494 0.00557163 0.0236979 0.0;
-3.7329e-15 -0.011889 0.0627682 0.0258734 -0.0446072 0.0011675 0.0;
-1.66533e-15 -0.000530315 -4.70641e-5 0.0011004 -0.00115177 -0.00692905 0.0]
#### dID/dqd
###dIDdqd_expected =
###[0.238452 2.29578 -0.352037 -1.37459 0.0248603 0.0119302 -0.000134436;
###-2.8865 -0.0127031 -0.592737 -2.50106 0.140087 0.144495 0.00036346;
###-0.0332868 -0.0451345 -0.00113879 0.00377924 0.00176493 0.00696072 8.82326e-5;
###0.952163 1.20503 -0.0152271 -0.00501841 -0.0337579 -0.065101 -0.000626627;
###-0.0138919 -0.0459722 0.00441596 0.0210321 0.00110428 0.00638248 9.10967e-5;
###-0.00506909 -0.0479932 0.0103165 0.0538115 -0.00638236 5.30825e-16 0.000622359;
###-0.000134436 -0.000436491 -0.000117578 0.00104945 -0.000351123 -0.000622359 -2.69223e-19]

#-------------------------------------------------------------------------------
# Print Outputs
#-------------------------------------------------------------------------------
println("dID/dq Expected"); display(dIDdq_expected); println("\n")
println("dID/dq"); display(dIDdq_out); println("\n")

#-------------------------------------------------------------------------------
# Test Outputs
#-------------------------------------------------------------------------------
@test dIDdq_out â‰ˆ dIDdq_expected atol=1e-5
println("Test passed!")
