# xDot_inputs
#
# Format the Inputs for xdot.v

#-------------------------------------------------------------------------------
# Import Libraries
#-------------------------------------------------------------------------------
using LinearAlgebra
using FixedPointNumbers

#-------------------------------------------------------------------------------
# Data Type
#-------------------------------------------------------------------------------
CUSTOM_TYPE = Fixed{Int32,16} # data type

#-------------------------------------------------------------------------------
# Fixed-Point Parameters
#-------------------------------------------------------------------------------
WIDTH = 32
DECIMAL_BITS = 16

#-------------------------------------------------------------------------------
# Define Test Function
#-------------------------------------------------------------------------------
function xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
   #----------------------------------------------------------------------------
   # Inputs and Expected Outputs
   #----------------------------------------------------------------------------
   if (mcross_bool) # mcross
      if (li == 2) # Link 2
         xform =
         [-0.927773 0.0 0.373144 0.0 0.0 0.0;
         0.373144 0.0 0.927773 0.0 0.0 0.0;
         0.0 1.0 0.0 0.0 0.0 0.0;
         0.0 -0.187874 0.0 -0.927773 0.0 0.373144;
         0.0 0.0755618 0.0 0.373144 0.0 0.927773;
         -0.2025 0.0 0.0 0.0 1.0 0.0]
         vec = [0.0; 0.0; 0.999905; 0.0; 0.0; 0.0]
         xvec = [0.927685; -0.373109; 0.0; 0.0; -0.0; 0.0]
      elseif (li == 3) # Link 3
         xform =
         [-0.826669 0.0 -0.562689 0.0 0.0 0.0;
         -0.562689 0.0 0.826669 0.0 0.0 0.0;
         0.0 1.0 0.0 0.0 0.0 0.0;
         -0.11507 8.26669e-13 0.169054 -0.826669 0.0 -0.562689;
         0.169054 5.62689e-13 0.11507 -0.562689 0.0 0.826669;
         1.0e-12 0.0 0.0 0.0 1.0 0.0]
         vec = [0.373109; 0.927685; 0.251662; 0.0; 0.0; 0.0]
         xvec = [-0.00190277; 0.450045; 0.0; 0.0920342; 0.000389117; 0.0]
      elseif (li == 4) # Link 4
         xform =
         [0.999945 0.0 -0.0104451 0.0 0.0 0.0;
         0.0104451 0.0 0.999945 0.0 0.0 0.0;
         0.0 -1.0 0.0 0.0 0.0 0.0;
         0.0 0.215488 0.0 0.999945 0.0 -0.0104451;
         0.0 0.00225091 0.0 0.0104451 0.0 0.999945;
         0.2155 0.0 0.0 0.0 -1.0 0.0]
         vec = [-0.450045; -0.00190277; 1.91435; -0.000389117; 0.0920342; 3.73109e-13]
         xvec = [1.90955; 0.470016; 0.0; -8.34731e-6; 0.00079912; 0.0]
      elseif (li == 5) # Link 5
         xform =
         [-0.668187 0.0 -0.743993 0.0 0.0 0.0;
         -0.743993 0.0 0.668187 0.0 0.0 0.0;
         0.0 1.0 0.0 0.0 0.0 0.0;
         -0.137267 6.68187e-13 0.123281 -0.668187 0.0 -0.743993;
         0.123281 7.43993e-13 0.137267 -0.743993 0.0 0.668187;
         1.0e-12 0.0 0.0 0.0 1.0 0.0]
         vec = [-0.470016; 1.90955; 0.557654; -0.00079912; -8.34731e-6; -0.189019]
         xvec = [0.722306; 0.100832; 0.0; -0.107102; -0.274428; 0.0]
      elseif (li == 6) # Link 6
         xform =
         [0.951994 0.0 0.306117 0.0 0.0 0.0;
         -0.306117 0.0 0.951994 0.0 0.0 0.0;
         0.0 -1.0 0.0 0.0 0.0 0.0;
         -6.12234e-13 0.205155 1.90399e-12 0.951994 0.0 0.306117;
         -1.90399e-12 -0.0659682 -6.12234e-13 -0.306117 0.0 0.951994;
         0.2155 0.0 0.0 0.0 -1.0 0.0]
         vec = [-0.100832; 0.722306; 2.34665; 0.274428; -0.107102; -8.34731e-6]
         xvec = [2.26487; -0.622359; 0.0; -0.131664; -0.409436; 0.0]
      elseif (li == 7) # Link 7
         xform =
         [0.662605 0.0 0.748969 0.0 0.0 0.0;
         0.748969 0.0 -0.662605 0.0 0.0 0.0;
         0.0 1.0 0.0 0.0 0.0 0.0;
         0.0606665 0.0 -0.053671 0.662605 0.0 0.748969;
         -0.053671 0.0 -0.0606665 0.748969 0.0 -0.662605;
         0.0 0.0 0.0 0.0 1.0 0.0]
         vec = [0.622359; 2.26487; -0.297588; 0.409436; -0.131664; 0.0853726]
         xvec = [0.663311; -0.189494; 0.0; 0.234737; -0.388964; 0.0]
      end
   else # not mcross
      if (li == 3) # Link 3
         xform =
         [-0.826669 0.0 -0.562689 0.0 0.0 0.0;
         -0.562689 0.0 0.826669 0.0 0.0 0.0;
         0.0 1.0 0.0 0.0 0.0 0.0;
         -0.11507 8.26669e-13 0.169054 -0.826669 0.0 -0.562689;
         0.169054 5.62689e-13 0.11507 -0.562689 0.0 0.826669;
         1.0e-12 0.0 0.0 0.0 1.0 0.0]
         vec = [0.927685, -0.373109, 0.0, 0.0, -0.0, 0.0]
         xvec = [-0.766888; -0.521998; -0.373109; -0.106749; 0.156829; 9.27685e-13]
      elseif (li == 4) # Link 4
         xform =
         [0.999945 0.0 -0.0104451 0.0 0.0 0.0;
         0.0104451 0.0 0.999945 0.0 0.0 0.0;
         0.0 -1.0 0.0 0.0 0.0 0.0;
         0.0 0.215488 0.0 0.999945 0.0 -0.0104451;
         0.0 0.00225091 0.0 0.0104451 0.0 0.999945;
         0.2155 0.0 0.0 0.0 -1.0 0.0]
         vec = [-0.00190277, 0.450045, 0.0, 0.0920342, 0.000389117, 0.0]
         xvec = [-0.00190267; -1.98746e-5; -0.450045; 0.189009; 0.00197431; -0.000799164]
      elseif (li == 5) # Link 5
         xform =
         [-0.668187 0.0 -0.743993 0.0 0.0 0.0;
         -0.743993 0.0 0.668187 0.0 0.0 0.0;
         0.0 1.0 0.0 0.0 0.0 0.0;
         -0.137267 6.68187e-13 0.123281 -0.668187 0.0 -0.743993;
         0.123281 7.43993e-13 0.137267 -0.743993 0.0 0.668187;
         1.0e-12 0.0 0.0 0.0 1.0 0.0]
         vec = [1.90955, 0.470016, 0.0, -8.34731e-6, 0.00079912, 0.0]
         xvec = [-1.27593; -1.42069; 0.470016; -0.262112; 0.235416; 0.00079912]
      elseif (li == 6) # Link 6
         xform =
         [0.951994 0.0 0.306117 0.0 0.0 0.0;
         -0.306117 0.0 0.951994 0.0 0.0 0.0;
         0.0 -1.0 0.0 0.0 0.0 0.0;
         -6.12234e-13 0.205155 1.90399e-12 0.951994 0.0 0.306117;
         -1.90399e-12 -0.0659682 -6.12234e-13 -0.306117 0.0 0.951994;
         0.2155 0.0 0.0 0.0 -1.0 0.0]
         vec = [0.722306, 0.100832, 0.0, -0.107102, -0.274428, 0.0]
         xvec = [0.687631; -0.22111; -0.100832; -0.0812742; 0.026134; 0.430085]
      elseif (li == 7) # Link 7
         xform =
         [0.662605 0.0 0.748969 0.0 0.0 0.0;
         0.748969 0.0 -0.662605 0.0 0.0 0.0;
         0.0 1.0 0.0 0.0 0.0 0.0;
         0.0606665 0.0 -0.053671 0.662605 0.0 0.748969;
         -0.053671 0.0 -0.0606665 0.748969 0.0 -0.662605;
         0.0 0.0 0.0 0.0 1.0 0.0]
         vec = [2.26487, -0.622359, 0.0, -0.131664, -0.409436, 0.0]
         xvec = [1.50071; 1.69632; -0.622359; 0.0501602; -0.22017; -0.409436]
      end
   end

   #----------------------------------------------------------------------------
   # Convert Values to Fixed-Point Binary
   #----------------------------------------------------------------------------
   for i in 1:length(vec)
      vec[i] = round(vec[i]*(2^DECIMAL_BITS))
   end
   for i in 1:length(xvec)
      xvec[i] = round(xvec[i]*(2^DECIMAL_BITS))
   end
   for i in 1:size(xform)[1] # rows
      for j in 1:size(xform)[2] # cols
         xform[i,j] = round(xform[i,j]*(2^DECIMAL_BITS))
      end
   end

   #----------------------------------------------------------------------------
   # Print Fixed-Point Binary Values for Vivado Simulation
   #----------------------------------------------------------------------------
   println("// Link = ",li,", mcross = ",mcross_bool)
   println("vec_in_AX = 32'd",vec[1],
         "; vec_in_AY = 32'd",vec[2],
         "; vec_in_AZ = 32'd",vec[3],
         "; vec_in_LX = 32'd",vec[4],
         "; vec_in_LY = 32'd",vec[5],
         "; vec_in_LZ = 32'd",vec[6],";")
   println("\$display (\"vec_in = %d,%d,%d,%d,%d,%d\", vec_in_AX,vec_in_AY,vec_in_AZ,vec_in_LX,vec_in_LY,vec_in_LZ);")
   println("xform_in_AX_AX = 32'd",xform[1,1],"; xform_in_AX_AY = 32'd",xform[1,2],"; xform_in_AX_AZ = 32'd",xform[1,3],";")
   println("xform_in_AY_AX = 32'd",xform[2,1],"; xform_in_AY_AY = 32'd",xform[2,2],"; xform_in_AY_AZ = 32'd",xform[2,3],";")
   println("                                     xform_in_AZ_AY = 32'd",xform[3,2],"; xform_in_AZ_AZ = 32'd",xform[3,3],";")
   println("xform_in_LX_AX = 32'd",xform[4,1],"; xform_in_LX_AY = 32'd",xform[4,2],"; xform_in_LX_AZ = 32'd",xform[4,3],";  xform_in_LX_LX = 32'd",xform[4,4],"; xform_in_LX_LY = 32'd",xform[4,5],"; xform_in_LX_LZ = 32'd",xform[4,6],";")
   println("xform_in_LY_AX = 32'd",xform[5,1],"; xform_in_LY_AY = 32'd",xform[5,2],"; xform_in_LY_AZ = 32'd",xform[5,3],";  xform_in_LY_LX = 32'd",xform[5,4],"; xform_in_LY_LY = 32'd",xform[5,5],"; xform_in_LY_LZ = 32'd",xform[5,6],";")
   println("xform_in_LZ_AX = 32'd",xform[6,1],";                                                                                                                 xform_in_LZ_LY = 32'd",xform[6,5],"; xform_in_LZ_LZ = 32'd",xform[6,6],";")
   println("#100;")
   println("\$display (\"xvec     = ",xvec[1],", ",xvec[2],", ",xvec[3],", ",xvec[4],", ",xvec[5],", ",xvec[6],"\");")
   println("\$display (\"xvec_out = %d,%d,%d,%d,%d,%d\", xvec_out_AX,xvec_out_AY,xvec_out_AZ,xvec_out_LX,xvec_out_LY,xvec_out_LZ);")
   println("// -----------------------------------------------------------------------")

end

#-------------------------------------------------------------------------------
# Set Test Parameters and Run Test
#-------------------------------------------------------------------------------
println("// -----------------------------------------------------------------------")
li = 3; mcross_bool = false
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
li = 4; mcross_bool = false
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
li = 5; mcross_bool = false
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
li = 6; mcross_bool = false
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
li = 7; mcross_bool = false
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
li = 2; mcross_bool = true
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
li = 3; mcross_bool = true
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
li = 4; mcross_bool = true
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
li = 5; mcross_bool = true
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
li = 6; mcross_bool = true
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
li = 7; mcross_bool = true
xDotTest(CUSTOM_TYPE,li,mcross_bool,WIDTH,DECIMAL_BITS)
